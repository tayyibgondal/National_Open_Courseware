window.jest_html_reporters_callback__({"numFailedTestSuites":8,"numFailedTests":49,"numPassedTestSuites":8,"numPassedTests":152,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":16,"numTotalTests":201,"startTime":1715517969966,"success":false,"testResults":[{"numFailingTests":2,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517982850,"runtime":12403,"slow":true,"start":1715517970447},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Contact.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mContact and Donation Routes › should send a contact confirmation email\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39mpost(\u001b[32m\"/contact\"\u001b[39m)\u001b[33m.\u001b[39msend(mockContactData)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"Please check your email!\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/DFT/Contact.test.js\u001b[39m\u001b[0m\u001b[2m:15:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mContact and Donation Routes › should send a donation confirmation email\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 |\u001b[39m       \u001b[33m.\u001b[39msend(mockDonationData)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 29 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"Please check your email!\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/DFT/Contact.test.js\u001b[39m\u001b[0m\u001b[2m:29:29)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Contact and Donation Routes"],"duration":7485,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Contact.test.js:15:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Contact and Donation Routes should send a contact confirmation email","status":"failed","title":"should send a contact confirmation email"},{"ancestorTitles":["Contact and Donation Routes"],"duration":283,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Contact.test.js:29:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Contact and Donation Routes should send a donation confirmation email","status":"failed","title":"should send a donation confirmation email"}]},{"numFailingTests":0,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517984710,"runtime":14160,"slow":true,"start":1715517970550},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\integration tests\\FaqIntegration.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Integration Tests: FAQ Endpoints","GET /faqs"],"duration":6996,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints GET /faqs should return status code 200 and an array of FAQs","status":"passed","title":"should return status code 200 and an array of FAQs"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","POST /faqs/create"],"duration":399,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints POST /faqs/create should create a new FAQ and return status code 201","status":"passed","title":"should create a new FAQ and return status code 201"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","POST /faqs/create"],"duration":379,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints POST /faqs/create should return status code 200 even if answer not posted","status":"passed","title":"should return status code 200 even if answer not posted"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","GET /faqs/:faqId"],"duration":180,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints GET /faqs/:faqId should get a single FAQ by ID and return status code 200","status":"passed","title":"should get a single FAQ by ID and return status code 200"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","GET /faqs/:faqId"],"duration":9,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints GET /faqs/:faqId should return status code 500 if invalid FAQ ID provided","status":"passed","title":"should return status code 500 if invalid FAQ ID provided"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","GET /faqs/unanswered"],"duration":508,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints GET /faqs/unanswered should get all unanswered FAQs and return status code 200","status":"passed","title":"should get all unanswered FAQs and return status code 200"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","PUT /faqs/edit/:faqId"],"duration":788,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints PUT /faqs/edit/:faqId should update an existing FAQ by ID and return status code 200","status":"passed","title":"should update an existing FAQ by ID and return status code 200"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","PUT /faqs/edit/:faqId"],"duration":7,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints PUT /faqs/edit/:faqId should return status code 500 if FAQ not found due to invalid ID","status":"passed","title":"should return status code 500 if FAQ not found due to invalid ID"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","DELETE /faqs/delete/:faqId"],"duration":373,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints DELETE /faqs/delete/:faqId should delete an FAQ by ID and return status code 200","status":"passed","title":"should delete an FAQ by ID and return status code 200"},{"ancestorTitles":["Integration Tests: FAQ Endpoints","DELETE /faqs/delete/:faqId"],"duration":11,"failureMessages":[],"fullName":"Integration Tests: FAQ Endpoints DELETE /faqs/delete/:faqId should return status code 500 if FAQ not found","status":"passed","title":"should return status code 500 if FAQ not found"}]},{"numFailingTests":1,"numPassingTests":8,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517985191,"runtime":14738,"slow":true,"start":1715517970453},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\integration tests\\CareerPathIntegration.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mIntegration Tests: Career Paths Endpoints › DELETE /careerpaths/delete/:careerPathId › should delete a career path and return status code 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 128 |\u001b[39m       \u001b[90m// Check the status code and response body\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 129 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 130 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"CareerPath deleted!\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m       \u001b[90m// Check if the career path is deleted from the database\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration tests/CareerPathIntegration.test.js\u001b[39m\u001b[0m\u001b[2m:129:31)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Integration Tests: Career Paths Endpoints","GET /careerpaths"],"duration":7786,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints GET /careerpaths should return status code 200 and an array of career paths","status":"passed","title":"should return status code 200 and an array of career paths"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","POST /careerpaths/create"],"duration":521,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints POST /careerpaths/create should create a new career path and return status code 200","status":"passed","title":"should create a new career path and return status code 200"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","POST /careerpaths/create"],"duration":8,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints POST /careerpaths/create should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","PUT /careerpaths/edit/:careerPathId"],"duration":734,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints PUT /careerpaths/edit/:careerPathId should update a career path and return status code 200","status":"passed","title":"should update a career path and return status code 200"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","PUT /careerpaths/edit/:careerPathId"],"duration":63,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints PUT /careerpaths/edit/:careerPathId should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","GET /careerpaths/search/:query"],"duration":199,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints GET /careerpaths/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","GET /careerpaths/search/:query"],"duration":230,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints GET /careerpaths/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","DELETE /careerpaths/delete/:careerPathId"],"duration":207,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\integration tests\\CareerPathIntegration.test.js:129:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Integration Tests: Career Paths Endpoints DELETE /careerpaths/delete/:careerPathId should delete a career path and return status code 200","status":"failed","title":"should delete a career path and return status code 200"},{"ancestorTitles":["Integration Tests: Career Paths Endpoints","DELETE /careerpaths/delete/:careerPathId"],"duration":15,"failureMessages":[],"fullName":"Integration Tests: Career Paths Endpoints DELETE /careerpaths/delete/:careerPathId should return status code 500 if career path not found","status":"passed","title":"should return status code 500 if career path not found"}]},{"numFailingTests":4,"numPassingTests":14,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517985483,"runtime":15051,"slow":true,"start":1715517970432},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Donation.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /donate › should return status code 500 with invalid email\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       currency\u001b[33m:\u001b[39m \u001b[32m\"USD\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 112 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 113 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 114 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 115 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 116 |\u001b[39m   \u001b[90m// Empty value for email\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Donation.test.js\u001b[39m\u001b[0m\u001b[2m:113:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /donate › should return status code 500 with invalid number\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 152 |\u001b[39m       currency\u001b[33m:\u001b[39m \u001b[32m\"USD\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 154 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 155 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 156 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 157 |\u001b[39m   \u001b[90m// Empty value for number\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Donation.test.js\u001b[39m\u001b[0m\u001b[2m:154:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /donate › should return status code 500 with invalid amount\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       currency\u001b[33m:\u001b[39m \u001b[32m\"USD\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 194 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 195 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 196 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 197 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 198 |\u001b[39m   \u001b[90m// Empty value for amount\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Donation.test.js\u001b[39m\u001b[0m\u001b[2m:195:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /donate › should return status code 500 with invalid currency\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 234 |\u001b[39m       currency\u001b[33m:\u001b[39m \u001b[32m\"InvalidCurrency\"\u001b[39m\u001b[33m,\u001b[39m \u001b[90m// Invalid currency\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 235 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 236 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 237 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 238 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 239 |\u001b[39m   \u001b[90m// Empty value for currency\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Donation.test.js\u001b[39m\u001b[0m\u001b[2m:236:29)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["POST /donate"],"duration":7484,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid firstName","status":"passed","title":"should return status code 200 with valid firstName"},{"ancestorTitles":["POST /donate"],"duration":7,"failureMessages":[],"fullName":"POST /donate should return status code 500 with invalid firstName","status":"passed","title":"should return status code 500 with invalid firstName"},{"ancestorTitles":["POST /donate"],"duration":6,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty firstName","status":"passed","title":"should return status code 500 with empty firstName"},{"ancestorTitles":["POST /donate"],"duration":275,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid lastName","status":"passed","title":"should return status code 200 with valid lastName"},{"ancestorTitles":["POST /donate"],"duration":8,"failureMessages":[],"fullName":"POST /donate should return status code 500 with invalid lastName","status":"passed","title":"should return status code 500 with invalid lastName"},{"ancestorTitles":["POST /donate"],"duration":6,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty lastName","status":"passed","title":"should return status code 500 with empty lastName"},{"ancestorTitles":["POST /donate"],"duration":187,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid email","status":"passed","title":"should return status code 200 with valid email"},{"ancestorTitles":["POST /donate"],"duration":276,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Donation.test.js:113:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /donate should return status code 500 with invalid email","status":"failed","title":"should return status code 500 with invalid email"},{"ancestorTitles":["POST /donate"],"duration":9,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty email","status":"passed","title":"should return status code 500 with empty email"},{"ancestorTitles":["POST /donate"],"duration":466,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid number","status":"passed","title":"should return status code 200 with valid number"},{"ancestorTitles":["POST /donate"],"duration":361,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Donation.test.js:154:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /donate should return status code 500 with invalid number","status":"failed","title":"should return status code 500 with invalid number"},{"ancestorTitles":["POST /donate"],"duration":137,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty number","status":"passed","title":"should return status code 500 with empty number"},{"ancestorTitles":["POST /donate"],"duration":189,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid amount","status":"passed","title":"should return status code 200 with valid amount"},{"ancestorTitles":["POST /donate"],"duration":209,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Donation.test.js:195:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /donate should return status code 500 with invalid amount","status":"failed","title":"should return status code 500 with invalid amount"},{"ancestorTitles":["POST /donate"],"duration":8,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty amount","status":"passed","title":"should return status code 500 with empty amount"},{"ancestorTitles":["POST /donate"],"duration":217,"failureMessages":[],"fullName":"POST /donate should return status code 200 with valid currency","status":"passed","title":"should return status code 200 with valid currency"},{"ancestorTitles":["POST /donate"],"duration":239,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Donation.test.js:236:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /donate should return status code 500 with invalid currency","status":"failed","title":"should return status code 500 with invalid currency"},{"ancestorTitles":["POST /donate"],"duration":20,"failureMessages":[],"fullName":"POST /donate should return status code 500 with empty currency","status":"passed","title":"should return status code 500 with empty currency"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517985276,"runtime":14744,"slow":true,"start":1715517970532},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\SystemTest.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["System Test: Interaction with Web App Features"],"duration":8556,"failureMessages":[],"fullName":"System Test: Interaction with Web App Features should allow the user to create, edit, and delete a course","status":"passed","title":"should allow the user to create, edit, and delete a course"},{"ancestorTitles":["System Test: Interaction with Web App Features"],"duration":883,"failureMessages":[],"fullName":"System Test: Interaction with Web App Features should allow the user to create, search, and delete a book","status":"passed","title":"should allow the user to create, search, and delete a book"},{"ancestorTitles":["System Test: Interaction with Web App Features"],"duration":189,"failureMessages":[],"fullName":"System Test: Interaction with Web App Features should allow the user to search for a career path","status":"passed","title":"should allow the user to search for a career path"},{"ancestorTitles":["System Test: Interaction with Web App Features"],"duration":602,"failureMessages":[],"fullName":"System Test: Interaction with Web App Features should allow the user to create, edit, and delete a FAQ","status":"passed","title":"should allow the user to create, edit, and delete a FAQ"}]},{"numFailingTests":0,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517986812,"runtime":16333,"slow":true,"start":1715517970479},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Faq.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["GET /faqs"],"duration":7946,"failureMessages":[],"fullName":"GET /faqs should return status code 200 and an array of faqs","status":"passed","title":"should return status code 200 and an array of faqs"},{"ancestorTitles":["POST /faqs/create"],"duration":443,"failureMessages":[],"fullName":"POST /faqs/create should create a new FAQ and return status code 201","status":"passed","title":"should create a new FAQ and return status code 201"},{"ancestorTitles":["POST /faqs/create"],"duration":215,"failureMessages":[],"fullName":"POST /faqs/create should return status code 200 even if answer not posted (i.e., when user asks a question)","status":"passed","title":"should return status code 200 even if answer not posted (i.e., when user asks a question)"},{"ancestorTitles":["GET /faqs/:faqId"],"duration":231,"failureMessages":[],"fullName":"GET /faqs/:faqId should get a single FAQ by ID and return status code 200","status":"passed","title":"should get a single FAQ by ID and return status code 200"},{"ancestorTitles":["GET /faqs/:faqId"],"duration":138,"failureMessages":[],"fullName":"GET /faqs/:faqId should return status code 500 if invalid id for FAQ is provided","status":"passed","title":"should return status code 500 if invalid id for FAQ is provided"},{"ancestorTitles":["GET /faqs/unanswered"],"duration":215,"failureMessages":[],"fullName":"GET /faqs/unanswered should get all unanswered FAQs and return status code 200","status":"passed","title":"should get all unanswered FAQs and return status code 200"},{"ancestorTitles":["PUT /faqs/edit/:faqId"],"duration":381,"failureMessages":[],"fullName":"PUT /faqs/edit/:faqId should update an existing FAQ by ID and return status code 200","status":"passed","title":"should update an existing FAQ by ID and return status code 200"},{"ancestorTitles":["PUT /faqs/edit/:faqId"],"duration":9,"failureMessages":[],"fullName":"PUT /faqs/edit/:faqId should return status code 500 if FAQ not found due to invalid id provided","status":"passed","title":"should return status code 500 if FAQ not found due to invalid id provided"},{"ancestorTitles":["DELETE /faqs/delete/:faqId"],"duration":756,"failureMessages":[],"fullName":"DELETE /faqs/delete/:faqId should delete an FAQ by ID and return status code 200","status":"passed","title":"should delete an FAQ by ID and return status code 200"},{"ancestorTitles":["DELETE /faqs/delete/:faqId"],"duration":8,"failureMessages":[],"fullName":"DELETE /faqs/delete/:faqId should return status code 500 if FAQ not found","status":"passed","title":"should return status code 500 if FAQ not found"}]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\security tests\\Security-equiv-part.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Cannot find module '../../../models/User' from 'tests/security tests/Security-equiv-part.test.js'\n\n    \u001b[0m \u001b[90m  5 |\u001b[39m\n     \u001b[90m  6 |\u001b[39m \u001b[90m// Mocking the User model for testing purposes\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  7 |\u001b[39m jest\u001b[33m.\u001b[39mmock(\u001b[32m\"../../../models/User\"\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m  8 |\u001b[39m\n     \u001b[90m  9 |\u001b[39m \u001b[90m// Mocking the bcrypt and jwt modules\u001b[39m\n     \u001b[90m 10 |\u001b[39m jest\u001b[33m.\u001b[39mmock(\u001b[32m\"bcrypt\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Resolver._throwModNotFoundError (\u001b[22mnode_modules/jest-resolve/build/resolver.js\u001b[2m:427:11)\u001b[22m\n      \u001b[2mat Object.mock (\u001b[22m\u001b[0m\u001b[36mtests/security tests/Security-equiv-part.test.js\u001b[39m\u001b[0m\u001b[2m:7:6)\u001b[22m\n","testResults":[]},{"numFailingTests":2,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517987361,"runtime":16928,"slow":true,"start":1715517970433},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\CareerPath.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDELETE /careerpaths/delete/:careerPathId › should delete a career path and return status code 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 128 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 129 |\u001b[39m     \u001b[90m// Check the status code and response body\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 130 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"CareerPath deleted!\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 133 |\u001b[39m     \u001b[90m// Check if the career path is deleted from the database\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/DFT/CareerPath.test.js\u001b[39m\u001b[0m\u001b[2m:130:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGET /careerpaths/:careerPathId › should return status code 404 if the career path does not exist\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 225 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 226 |\u001b[39m     \u001b[90m// Check if the response has status code 404\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 227 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 228 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"CareerPath not found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 229 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 230 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/DFT/CareerPath.test.js\u001b[39m\u001b[0m\u001b[2m:227:29)\u001b[22m\u001b[2m\u001b[22m\n\n\n  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Cannot set headers after they are sent to the client\n\n    \u001b[0m \u001b[90m 129 |\u001b[39m     \u001b[90m// }\u001b[39m\n     \u001b[90m 130 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 131 |\u001b[39m     res\u001b[33m.\u001b[39mstatus(\u001b[35m500\u001b[39m)\u001b[33m.\u001b[39mjson({ message\u001b[33m:\u001b[39m \u001b[32m\"Internal Server Error!\"\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 132 |\u001b[39m   }\n     \u001b[90m 133 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 134 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ServerResponse.header (\u001b[22mnode_modules/express/lib/response.js\u001b[2m:794:10)\u001b[22m\n      \u001b[2mat ServerResponse.send (\u001b[22mnode_modules/express/lib/response.js\u001b[2m:174:12)\u001b[22m\n      \u001b[2mat ServerResponse.json (\u001b[22mnode_modules/express/lib/response.js\u001b[2m:278:15)\u001b[22m\n      \u001b[2mat json (\u001b[22mcareerPathRoutes.js\u001b[2m:131:21)\u001b[22m\n","testResults":[{"ancestorTitles":["GET /careerpaths"],"duration":7728,"failureMessages":[],"fullName":"GET /careerpaths should return status code 200 and an array of career paths","status":"passed","title":"should return status code 200 and an array of career paths"},{"ancestorTitles":["POST /careerpaths/create"],"duration":473,"failureMessages":[],"fullName":"POST /careerpaths/create should create a new career path and return status code 200","status":"passed","title":"should create a new career path and return status code 200"},{"ancestorTitles":["POST /careerpaths/create"],"duration":8,"failureMessages":[],"fullName":"POST /careerpaths/create should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["PUT /careerpaths/edit/:careerPathId"],"duration":663,"failureMessages":[],"fullName":"PUT /careerpaths/edit/:careerPathId should update a career path and return status code 200","status":"passed","title":"should update a career path and return status code 200"},{"ancestorTitles":["PUT /careerpaths/edit/:careerPathId"],"duration":13,"failureMessages":[],"fullName":"PUT /careerpaths/edit/:careerPathId should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["DELETE /careerpaths/delete/:careerPathId"],"duration":196,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\CareerPath.test.js:130:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"DELETE /careerpaths/delete/:careerPathId should delete a career path and return status code 200","status":"failed","title":"should delete a career path and return status code 200"},{"ancestorTitles":["DELETE /careerpaths/delete/:careerPathId"],"duration":62,"failureMessages":[],"fullName":"DELETE /careerpaths/delete/:careerPathId should return status code 500 if career path not found","status":"passed","title":"should return status code 500 if career path not found"},{"ancestorTitles":["GET /careerpaths/search/:query"],"duration":219,"failureMessages":[],"fullName":"GET /careerpaths/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["GET /careerpaths/search/:query"],"duration":262,"failureMessages":[],"fullName":"GET /careerpaths/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"},{"ancestorTitles":["GET /careerpaths/:careerPathId"],"duration":198,"failureMessages":[],"fullName":"GET /careerpaths/:careerPathId should return status code 200 and a career path object","status":"passed","title":"should return status code 200 and a career path object"},{"ancestorTitles":["GET /careerpaths/:careerPathId"],"duration":9,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\CareerPath.test.js:227:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /careerpaths/:careerPathId should return status code 404 if the career path does not exist","status":"failed","title":"should return status code 404 if the career path does not exist"},{"ancestorTitles":["GET /careerpaths/:careerPathId"],"duration":185,"failureMessages":[],"fullName":"GET /careerpaths/:careerPathId should return status code 500 if an internal server error occurs","status":"passed","title":"should return status code 500 if an internal server error occurs"}]},{"numFailingTests":1,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517987487,"runtime":17054,"slow":true,"start":1715517970433},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Book.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGET /library › GET /library/:bookId › should return status code 200 and a book object\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"userId\"\u001b[39m\n    Received path: \u001b[31m[]\u001b[39m\n\n    Expected value: \u001b[32m\"658964aeacfe9dbdb12ad5f1\"\u001b[39m\n    Received value: \u001b[31m{\"__v\": 0, \"_id\": \"6640ba1f1d725fa1d9167e3c\", \"author\": \"Test Author\", \"createdAt\": \"2024-05-12T12:46:23.025Z\", \"summary\": \"Test Summary\", \"title\": \"Test Book\", \"updatedAt\": \"2024-05-12T12:46:23.025Z\"}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"summary\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Test Summary\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Test Author\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 41 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m         \u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m         \u001b[32m\"658964aeacfe9dbdb12ad5f1\"\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 44 |\u001b[39m       )\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveProperty (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/DFT/Book.test.js\u001b[39m\u001b[0m\u001b[2m:41:29)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["GET /library"],"duration":7968,"failureMessages":[],"fullName":"GET /library should return status code 200 and an array of books","status":"passed","title":"should return status code 200 and an array of books"},{"ancestorTitles":["GET /library","GET /library/:bookId"],"duration":211,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"userId\"\u001b[39m\nReceived path: \u001b[31m[]\u001b[39m\n\nExpected value: \u001b[32m\"658964aeacfe9dbdb12ad5f1\"\u001b[39m\nReceived value: \u001b[31m{\"__v\": 0, \"_id\": \"6640ba1f1d725fa1d9167e3c\", \"author\": \"Test Author\", \"createdAt\": \"2024-05-12T12:46:23.025Z\", \"summary\": \"Test Summary\", \"title\": \"Test Book\", \"updatedAt\": \"2024-05-12T12:46:23.025Z\"}\u001b[39m\n    at Object.toHaveProperty (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Book.test.js:41:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /library GET /library/:bookId should return status code 200 and a book object","status":"failed","title":"should return status code 200 and a book object"},{"ancestorTitles":["GET /library","GET /library/:bookId"],"duration":149,"failureMessages":[],"fullName":"GET /library GET /library/:bookId should return status code 500 if an internal server error occurs","status":"passed","title":"should return status code 500 if an internal server error occurs"},{"ancestorTitles":["POST /library/create"],"duration":414,"failureMessages":[],"fullName":"POST /library/create should create a new book and return status code 200","status":"passed","title":"should create a new book and return status code 200"},{"ancestorTitles":["POST /library/create"],"duration":30,"failureMessages":[],"fullName":"POST /library/create should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":653,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should update a book and return status code 200","status":"passed","title":"should update a book and return status code 200"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":14,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["DELETE /library/delete/:bookId"],"duration":546,"failureMessages":[],"fullName":"DELETE /library/delete/:bookId should delete a book and return status code 200","status":"passed","title":"should delete a book and return status code 200"},{"ancestorTitles":["DELETE /library/delete/:bookId"],"duration":8,"failureMessages":[],"fullName":"DELETE /library/delete/:bookId should return status code 500 if invlaid id","status":"passed","title":"should return status code 500 if invlaid id"},{"ancestorTitles":["GET /library/search/:query"],"duration":215,"failureMessages":[],"fullName":"GET /library/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["GET /library/search/:query"],"duration":211,"failureMessages":[],"fullName":"GET /library/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"}]},{"numFailingTests":0,"numPassingTests":12,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517988092,"runtime":17601,"slow":true,"start":1715517970491},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Course.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["GET /courses"],"duration":8145,"failureMessages":[],"fullName":"GET /courses should return status code 200 and an array of courses","status":"passed","title":"should return status code 200 and an array of courses"},{"ancestorTitles":["POST /courses/create"],"duration":802,"failureMessages":[],"fullName":"POST /courses/create should create a new course and return status code 200","status":"passed","title":"should create a new course and return status code 200"},{"ancestorTitles":["POST /courses/create"],"duration":8,"failureMessages":[],"fullName":"POST /courses/create should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["PUT /courses/edit/:courseId"],"duration":612,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId should update a book and return status code 200","status":"passed","title":"should update a book and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId"],"duration":14,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["DELETE /courses/delete/:courseId"],"duration":480,"failureMessages":[],"fullName":"DELETE /courses/delete/:courseId should delete a course and return status code 200","status":"passed","title":"should delete a course and return status code 200"},{"ancestorTitles":["DELETE /courses/delete/:courseId"],"duration":10,"failureMessages":[],"fullName":"DELETE /courses/delete/:courseId should return status code 500 if course not found","status":"passed","title":"should return status code 500 if course not found"},{"ancestorTitles":["GET /courses/search/:query"],"duration":192,"failureMessages":[],"fullName":"GET /courses/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["GET /courses/search/:query"],"duration":196,"failureMessages":[],"fullName":"GET /courses/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"},{"ancestorTitles":["GET /courses/:courseId"],"duration":457,"failureMessages":[],"fullName":"GET /courses/:courseId should return status code 200 and the course object","status":"passed","title":"should return status code 200 and the course object"},{"ancestorTitles":["GET /courses/:courseId"],"duration":8,"failureMessages":[],"fullName":"GET /courses/:courseId should return status code 500 if course ID is invalid","status":"passed","title":"should return status code 500 if course ID is invalid"},{"ancestorTitles":["GET /courses/:courseId"],"duration":9,"failureMessages":[],"fullName":"GET /courses/:courseId should return status code 500 if an internal server error occurs","status":"passed","title":"should return status code 500 if an internal server error occurs"}]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517989195,"runtime":3017,"slow":false,"start":1715517986178},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\security tests\\Authentication.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Authentication Endpoints","POST /login"],"duration":25,"failureMessages":[],"fullName":"Authentication Endpoints POST /login should return status code 500 if login credentials are invalid","status":"passed","title":"should return status code 500 if login credentials are invalid"},{"ancestorTitles":["Authentication Endpoints","POST /register"],"duration":150,"failureMessages":[],"fullName":"Authentication Endpoints POST /register should return status code 200 and a success message if registration is successful","status":"passed","title":"should return status code 200 and a success message if registration is successful"}]},{"numFailingTests":15,"numPassingTests":22,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517991853,"runtime":21403,"slow":true,"start":1715517970450},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mTitle Equivalence Classes › should return status code 500 if title is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newBookData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m     \u001b[90m// Check if the response has status code 500\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m   \u001b[90m// Empty Title\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:47:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if title is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 325 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 326 |\u001b[39m     \u001b[90m// Check if the response has status code 500\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 327 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 328 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 329 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 330 |\u001b[39m   it(\u001b[32m\"should return status code 500 if title is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:327:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if title is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 343 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 344 |\u001b[39m     \u001b[90m// Check if the response has status code 500\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 345 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 346 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 347 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 348 |\u001b[39m   \u001b[90m// ================================================================\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:345:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if summary is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 381 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"summary\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39msummary)\u001b[22m\n\u001b[2m     \u001b[90m 382 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 383 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 384 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 385 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 386 |\u001b[39m   \u001b[90m// Empty Summary\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:383:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if summary is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 397 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"summary\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39msummary)\u001b[22m\n\u001b[2m     \u001b[90m 398 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 399 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 400 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 401 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 402 |\u001b[39m   \u001b[90m// ================================================================\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:399:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if author is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 435 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"summary\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39msummary)\u001b[22m\n\u001b[2m     \u001b[90m 436 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 437 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 438 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 439 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 440 |\u001b[39m   \u001b[90m// Empty Author\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:437:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if author is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 451 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"summary\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39msummary)\u001b[22m\n\u001b[2m     \u001b[90m 452 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"author\"\u001b[39m\u001b[33m,\u001b[39m updatedBookData\u001b[33m.\u001b[39mauthor)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 453 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 454 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 455 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 456 |\u001b[39m   \u001b[90m// ================================================================\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:453:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /library/edit/:bookId › should return status code 500 if book ID is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 485 |\u001b[39m     \u001b[90m// Test case for empty book ID\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 486 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39mput(\u001b[32m`/library/edit/`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 487 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 488 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 489 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 490 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:487:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGET /library/search/:query › Search by Title › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 536 |\u001b[39m       \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent Book\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 537 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 538 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 539 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 540 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 541 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:538:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGET /library/search/:query › Search by Summary › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 568 |\u001b[39m       \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent Summary\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 569 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 570 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 571 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 572 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 573 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:570:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGET /library/search/:query › Search by User ID › should return status code 200 and search results if query matches user ID exactly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 624 |\u001b[39m       \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"658964aeacfe9dbdb12ad5f1\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 625 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 626 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 627 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Ensure search results are returned\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 628 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 629 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:626:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Title › should return status code 404 if query is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 646 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 647 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 648 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 649 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 650 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:648:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Author › should return status code 404 if query is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 656 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 657 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 658 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 659 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 660 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 661 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:658:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Summary › should return status code 404 if query is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 666 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 667 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 668 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 669 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 670 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 671 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:668:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by User ID › should return status code 404 if query is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 676 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 677 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/library/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 678 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 679 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 680 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 681 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Book.test.js\u001b[39m\u001b[0m\u001b[2m:678:29)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Title Equivalence Classes"],"duration":7763,"failureMessages":[],"fullName":"Title Equivalence Classes should create a new book with valid title and return status code 200","status":"passed","title":"should create a new book with valid title and return status code 200"},{"ancestorTitles":["Title Equivalence Classes"],"duration":186,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:47:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Title Equivalence Classes should return status code 500 if title is invalid","status":"failed","title":"should return status code 500 if title is invalid"},{"ancestorTitles":["Title Equivalence Classes"],"duration":7,"failureMessages":[],"fullName":"Title Equivalence Classes should return status code 500 if title is empty","status":"passed","title":"should return status code 500 if title is empty"},{"ancestorTitles":["Summary Equivalence Classes"],"duration":211,"failureMessages":[],"fullName":"Summary Equivalence Classes should create a new book with valid summary and return status code 200","status":"passed","title":"should create a new book with valid summary and return status code 200"},{"ancestorTitles":["Summary Equivalence Classes"],"duration":10,"failureMessages":[],"fullName":"Summary Equivalence Classes should return status code 500 if summary is invalid","status":"passed","title":"should return status code 500 if summary is invalid"},{"ancestorTitles":["Summary Equivalence Classes"],"duration":11,"failureMessages":[],"fullName":"Summary Equivalence Classes should return status code 500 if summary is empty","status":"passed","title":"should return status code 500 if summary is empty"},{"ancestorTitles":[],"duration":187,"failureMessages":[],"fullName":"should create a new book with valid author and return status code 200","status":"passed","title":"should create a new book with valid author and return status code 200"},{"ancestorTitles":[],"duration":9,"failureMessages":[],"fullName":"should return status code 500 if author is invalid","status":"passed","title":"should return status code 500 if author is invalid"},{"ancestorTitles":[],"duration":13,"failureMessages":[],"fullName":"should return status code 500 if author is empty","status":"passed","title":"should return status code 500 if author is empty"},{"ancestorTitles":[],"duration":263,"failureMessages":[],"fullName":"should create a new book with valid user ID and return status code 200","status":"passed","title":"should create a new book with valid user ID and return status code 200"},{"ancestorTitles":[],"duration":18,"failureMessages":[],"fullName":"should return status code 500 if user ID is invalid","status":"passed","title":"should return status code 500 if user ID is invalid"},{"ancestorTitles":[],"duration":11,"failureMessages":[],"fullName":"should return status code 500 if user ID is empty","status":"passed","title":"should return status code 500 if user ID is empty"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":748,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should update a book with valid title and return status code 200","status":"passed","title":"should update a book with valid title and return status code 200"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":394,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:327:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if title is invalid","status":"failed","title":"should return status code 500 if title is invalid"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":393,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:345:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if title is empty","status":"failed","title":"should return status code 500 if title is empty"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":1094,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should update a book with valid summary and return status code 200","status":"passed","title":"should update a book with valid summary and return status code 200"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":431,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:383:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if summary is invalid","status":"failed","title":"should return status code 500 if summary is invalid"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":377,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:399:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if summary is empty","status":"failed","title":"should return status code 500 if summary is empty"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":550,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should update a book with valid author and return status code 200","status":"passed","title":"should update a book with valid author and return status code 200"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":366,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:437:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if author is invalid","status":"failed","title":"should return status code 500 if author is invalid"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":344,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:453:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if author is empty","status":"failed","title":"should return status code 500 if author is empty"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":368,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should update a book with valid book ID and return status code 200","status":"passed","title":"should update a book with valid book ID and return status code 200"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":5,"failureMessages":[],"fullName":"PUT /library/edit/:bookId should return status code 500 if book ID is invalid","status":"passed","title":"should return status code 500 if book ID is invalid"},{"ancestorTitles":["PUT /library/edit/:bookId"],"duration":6,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:487:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /library/edit/:bookId should return status code 500 if book ID is empty","status":"failed","title":"should return status code 500 if book ID is empty"},{"ancestorTitles":["GET /library/search/:query","Search by Title"],"duration":180,"failureMessages":[],"fullName":"GET /library/search/:query Search by Title should return status code 200 and search results if query matches title exactly","status":"passed","title":"should return status code 200 and search results if query matches title exactly"},{"ancestorTitles":["GET /library/search/:query","Search by Title"],"duration":181,"failureMessages":[],"fullName":"GET /library/search/:query Search by Title should return status code 200 and search results if query matches title partially","status":"passed","title":"should return status code 200 and search results if query matches title partially"},{"ancestorTitles":["GET /library/search/:query","Search by Title"],"duration":170,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:538:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /library/search/:query Search by Title should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["GET /library/search/:query","Search by Summary"],"duration":198,"failureMessages":[],"fullName":"GET /library/search/:query Search by Summary should return status code 200 and search results if query matches summary exactly","status":"passed","title":"should return status code 200 and search results if query matches summary exactly"},{"ancestorTitles":["GET /library/search/:query","Search by Summary"],"duration":205,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:570:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /library/search/:query Search by Summary should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["GET /library/search/:query","Search by Author"],"duration":179,"failureMessages":[],"fullName":"GET /library/search/:query Search by Author should return status code 200 and search results if query matches author exactly","status":"passed","title":"should return status code 200 and search results if query matches author exactly"},{"ancestorTitles":["GET /library/search/:query","Search by Author"],"duration":178,"failureMessages":[],"fullName":"GET /library/search/:query Search by Author should return status code 404 if no results found for the query","status":"passed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["GET /library/search/:query","Search by User ID"],"duration":169,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:626:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /library/search/:query Search by User ID should return status code 200 and search results if query matches user ID exactly","status":"failed","title":"should return status code 200 and search results if query matches user ID exactly"},{"ancestorTitles":["GET /library/search/:query","Search by User ID"],"duration":188,"failureMessages":[],"fullName":"GET /library/search/:query Search by User ID should return status code 404 if no results found for the query","status":"passed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by Title"],"duration":7,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:648:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Title should return status code 404 if query is empty","status":"failed","title":"should return status code 404 if query is empty"},{"ancestorTitles":["Search by Author"],"duration":3,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:658:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Author should return status code 404 if query is empty","status":"failed","title":"should return status code 404 if query is empty"},{"ancestorTitles":["Search by Summary"],"duration":4,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:668:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Summary should return status code 404 if query is empty","status":"failed","title":"should return status code 404 if query is empty"},{"ancestorTitles":["Search by User ID"],"duration":4,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Book.test.js:678:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by User ID should return status code 404 if query is empty","status":"failed","title":"should return status code 404 if query is empty"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517992883,"runtime":9958,"slow":true,"start":1715517982925},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\integration tests\\CourseIntegration.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Integration Tests: Courses Endpoints","GET /courses"],"duration":5604,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints GET /courses should return status code 200 and an array of courses","status":"passed","title":"should return status code 200 and an array of courses"},{"ancestorTitles":["Integration Tests: Courses Endpoints","POST /courses/create"],"duration":188,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints POST /courses/create should create a new course and return status code 200","status":"passed","title":"should create a new course and return status code 200"},{"ancestorTitles":["Integration Tests: Courses Endpoints","PUT /courses/edit/:courseId"],"duration":351,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints PUT /courses/edit/:courseId should update a course and return status code 200","status":"passed","title":"should update a course and return status code 200"},{"ancestorTitles":["Integration Tests: Courses Endpoints","GET /courses/search/:query"],"duration":185,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints GET /courses/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["Integration Tests: Courses Endpoints","GET /courses/search/:query"],"duration":194,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints GET /courses/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"},{"ancestorTitles":["Integration Tests: Courses Endpoints","DELETE /courses/delete/:courseId"],"duration":186,"failureMessages":[],"fullName":"Integration Tests: Courses Endpoints DELETE /courses/delete/:courseId should delete a course and return status code 200","status":"passed","title":"should delete a course and return status code 200"}]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517993676,"runtime":8437,"slow":true,"start":1715517985239},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\DFT\\Donation.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["POST /donate"],"duration":5476,"failureMessages":[],"fullName":"POST /donate should create a new donation record and return status code 200","status":"passed","title":"should create a new donation record and return status code 200"},{"ancestorTitles":["POST /donate"],"duration":5,"failureMessages":[],"fullName":"POST /donate should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"}]},{"numFailingTests":0,"numPassingTests":9,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715517996098,"runtime":9326,"slow":true,"start":1715517986772},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\integration tests\\BookIntegration.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Integration Tests: Library Endpoints","GET /library"],"duration":5126,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints GET /library should return status code 200 and an array of books","status":"passed","title":"should return status code 200 and an array of books"},{"ancestorTitles":["Integration Tests: Library Endpoints","POST /library/create"],"duration":201,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints POST /library/create should create a new book and return status code 200","status":"passed","title":"should create a new book and return status code 200"},{"ancestorTitles":["Integration Tests: Library Endpoints","POST /library/create"],"duration":7,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints POST /library/create should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["Integration Tests: Library Endpoints","PUT /library/edit/:bookId"],"duration":568,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints PUT /library/edit/:bookId should update a book and return status code 200","status":"passed","title":"should update a book and return status code 200"},{"ancestorTitles":["Integration Tests: Library Endpoints","PUT /library/edit/:bookId"],"duration":16,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints PUT /library/edit/:bookId should return status code 500 if an error occurs","status":"passed","title":"should return status code 500 if an error occurs"},{"ancestorTitles":["Integration Tests: Library Endpoints","GET /library/search/:query"],"duration":217,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints GET /library/search/:query should return status code 200 and search results if query matches","status":"passed","title":"should return status code 200 and search results if query matches"},{"ancestorTitles":["Integration Tests: Library Endpoints","GET /library/search/:query"],"duration":206,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints GET /library/search/:query should return status code 404 if no results found","status":"passed","title":"should return status code 404 if no results found"},{"ancestorTitles":["Integration Tests: Library Endpoints","DELETE /library/delete/:bookId"],"duration":374,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints DELETE /library/delete/:bookId should delete a book and return status code 200","status":"passed","title":"should delete a book and return status code 200"},{"ancestorTitles":["Integration Tests: Library Endpoints","DELETE /library/delete/:bookId"],"duration":8,"failureMessages":[],"fullName":"Integration Tests: Library Endpoints DELETE /library/delete/:bookId should return status code 500 if book not found","status":"passed","title":"should return status code 500 if book not found"}]},{"numFailingTests":24,"numPassingTests":33,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1715518001945,"runtime":31512,"slow":true,"start":1715517970433},"testFilePath":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › Name Field › should return status code 500 if name is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 62 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 63 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 64 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 65 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 66 |\u001b[39m     it(\u001b[32m\"should return status code 500 if name is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:63:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › Instructor Field › should return status code 500 if instructor is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 141 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 142 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 143 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 144 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 145 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 146 |\u001b[39m     it(\u001b[32m\"should return status code 500 if instructor is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:143:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › Email Field › should return status code 500 if email is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 221 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 222 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 223 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 224 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 225 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 226 |\u001b[39m     it(\u001b[32m\"should return status code 500 if email is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:223:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › University Field › should return status code 500 if university is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 301 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 302 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 303 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 306 |\u001b[39m     it(\u001b[32m\"should return status code 500 if university is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:303:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › Year Field › should return status code 500 if year is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 381 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 382 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 383 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 384 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 385 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 386 |\u001b[39m     it(\u001b[32m\"should return status code 500 if year is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:383:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /courses/create › Description Field › should return status code 500 if description is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39mdescription)\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"userId\"\u001b[39m\u001b[33m,\u001b[39m newCourseData\u001b[33m.\u001b[39muserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m     it(\u001b[32m\"should return status code 500 if description is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:463:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Name Field › should return status code 500 if name is invalid\u001b[39m\u001b[22m\n\n    .field(name, val) val can not be empty\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 625 |\u001b[39m         \u001b[33m.\u001b[39mput(\u001b[32m\"/courses/edit/\"\u001b[39m \u001b[33m+\u001b[39m courseId)\u001b[22m\n\u001b[2m     \u001b[90m 626 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"name\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mname)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 627 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"instructor\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39minstructor)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 628 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"email\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39memail)\u001b[22m\n\u001b[2m     \u001b[90m 629 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"university\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39muniversity)\u001b[22m\n\u001b[2m     \u001b[90m 630 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Test.Object.<anonymous>.RequestBase.field (\u001b[22m\u001b[2mnode_modules/superagent/src/request-base.js\u001b[2m:456:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.field (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:627:10)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Name Field › should return status code 500 if name is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 649 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 650 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 651 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 652 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:651:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Instructor Field › should return status code 500 if instructor is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 694 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 695 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 696 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 697 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 698 |\u001b[39m     it(\u001b[32m\"should return status code 500 if instructor is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 699 |\u001b[39m       \u001b[36mconst\u001b[39m updatedCourseData \u001b[33m=\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:696:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Instructor Field › should return status code 500 if instructor is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 713 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 714 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 715 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 716 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 717 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 718 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:715:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Email Field › should return status code 500 if email is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 758 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 759 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 760 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 761 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 762 |\u001b[39m     it(\u001b[32m\"should return status code 500 if email is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 763 |\u001b[39m       \u001b[36mconst\u001b[39m updatedCourseData \u001b[33m=\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:760:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Email Field › should return status code 500 if email is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 777 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 778 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 779 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 780 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 781 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 782 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:779:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › University Field › should return status code 500 if university is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 822 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 823 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 824 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 825 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 826 |\u001b[39m     it(\u001b[32m\"should return status code 500 if university is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 827 |\u001b[39m       \u001b[36mconst\u001b[39m updatedCourseData \u001b[33m=\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:824:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › University Field › should return status code 500 if university is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 841 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 842 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 843 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 844 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 845 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 846 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:843:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Year Field › should return status code 500 if year is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 886 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 887 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 888 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 889 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 890 |\u001b[39m     it(\u001b[32m\"should return status code 500 if year is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 891 |\u001b[39m       \u001b[36mconst\u001b[39m updatedCourseData \u001b[33m=\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:888:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Year Field › should return status code 500 if year is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 905 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 906 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 907 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 908 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 909 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 910 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:907:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › Description Field › should return status code 500 if description is invalid\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 950 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 951 |\u001b[39m         \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 952 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 953 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 954 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 955 |\u001b[39m   it(\u001b[32m\"should return status code 500 if description is empty\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:952:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPUT /courses/edit/:courseId › should return status code 500 if description is empty\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 970 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"year\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39myear)\u001b[22m\n\u001b[2m     \u001b[90m 971 |\u001b[39m       \u001b[33m.\u001b[39mfield(\u001b[32m\"description\"\u001b[39m\u001b[33m,\u001b[39m updatedCourseData\u001b[33m.\u001b[39mdescription)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 972 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 973 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 974 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 975 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:972:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Name › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  997 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent Course\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Nonexistent query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  998 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  999 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1000 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1001 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1002 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:999:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Instructor › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 1023 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent Instructor\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Nonexistent query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1024 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 1025 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1026 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1027 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1028 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:1025:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Email › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 1049 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"nonexistent@example.com\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Nonexistent query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1050 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 1051 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1052 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1053 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1054 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:1051:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by University › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 1075 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent University\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Nonexistent query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1076 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 1077 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1078 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1079 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1080 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:1077:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Year › should return status code 200 and search results if query matches year partially\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 1094 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"20\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Partial match query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1095 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 1096 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1097 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Ensure search results are returned\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1098 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1099 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:1096:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSearch by Description › should return status code 404 if no results found for the query\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 1127 |\u001b[39m     \u001b[36mconst\u001b[39m query \u001b[33m=\u001b[39m \u001b[32m\"Nonexistent Description\"\u001b[39m\u001b[33m;\u001b[39m \u001b[90m// Nonexistent query\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1128 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/courses/search/${query}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 1129 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m      |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1130 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"No results found\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1131 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 1132 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/unit tests/equivalence partitioning/Course.test.js\u001b[39m\u001b[0m\u001b[2m:1129:29)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["POST /courses/create","Name Field"],"duration":11726,"failureMessages":[],"fullName":"POST /courses/create Name Field should create a new course with valid name and return status code 200","status":"passed","title":"should create a new course with valid name and return status code 200"},{"ancestorTitles":["POST /courses/create","Name Field"],"duration":202,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:63:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create Name Field should return status code 500 if name is invalid","status":"failed","title":"should return status code 500 if name is invalid"},{"ancestorTitles":["POST /courses/create","Name Field"],"duration":72,"failureMessages":[],"fullName":"POST /courses/create Name Field should return status code 500 if name is empty","status":"passed","title":"should return status code 500 if name is empty"},{"ancestorTitles":["POST /courses/create","Instructor Field"],"duration":438,"failureMessages":[],"fullName":"POST /courses/create Instructor Field should create a new course with valid instructor and return status code 200","status":"passed","title":"should create a new course with valid instructor and return status code 200"},{"ancestorTitles":["POST /courses/create","Instructor Field"],"duration":263,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:143:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create Instructor Field should return status code 500 if instructor is invalid","status":"failed","title":"should return status code 500 if instructor is invalid"},{"ancestorTitles":["POST /courses/create","Instructor Field"],"duration":11,"failureMessages":[],"fullName":"POST /courses/create Instructor Field should return status code 500 if instructor is empty","status":"passed","title":"should return status code 500 if instructor is empty"},{"ancestorTitles":["POST /courses/create","Email Field"],"duration":391,"failureMessages":[],"fullName":"POST /courses/create Email Field should create a new course with valid email and return status code 200","status":"passed","title":"should create a new course with valid email and return status code 200"},{"ancestorTitles":["POST /courses/create","Email Field"],"duration":206,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:223:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create Email Field should return status code 500 if email is invalid","status":"failed","title":"should return status code 500 if email is invalid"},{"ancestorTitles":["POST /courses/create","Email Field"],"duration":10,"failureMessages":[],"fullName":"POST /courses/create Email Field should return status code 500 if email is empty","status":"passed","title":"should return status code 500 if email is empty"},{"ancestorTitles":["POST /courses/create","University Field"],"duration":372,"failureMessages":[],"fullName":"POST /courses/create University Field should create a new course with valid university and return status code 200","status":"passed","title":"should create a new course with valid university and return status code 200"},{"ancestorTitles":["POST /courses/create","University Field"],"duration":262,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:303:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create University Field should return status code 500 if university is invalid","status":"failed","title":"should return status code 500 if university is invalid"},{"ancestorTitles":["POST /courses/create","University Field"],"duration":5,"failureMessages":[],"fullName":"POST /courses/create University Field should return status code 500 if university is empty","status":"passed","title":"should return status code 500 if university is empty"},{"ancestorTitles":["POST /courses/create","Year Field"],"duration":371,"failureMessages":[],"fullName":"POST /courses/create Year Field should create a new course with valid year and return status code 200","status":"passed","title":"should create a new course with valid year and return status code 200"},{"ancestorTitles":["POST /courses/create","Year Field"],"duration":217,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:383:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create Year Field should return status code 500 if year is invalid","status":"failed","title":"should return status code 500 if year is invalid"},{"ancestorTitles":["POST /courses/create","Year Field"],"duration":5,"failureMessages":[],"fullName":"POST /courses/create Year Field should return status code 500 if year is empty","status":"passed","title":"should return status code 500 if year is empty"},{"ancestorTitles":["POST /courses/create","Description Field"],"duration":389,"failureMessages":[],"fullName":"POST /courses/create Description Field should create a new course with valid description and return status code 200","status":"passed","title":"should create a new course with valid description and return status code 200"},{"ancestorTitles":["POST /courses/create","Description Field"],"duration":185,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:463:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /courses/create Description Field should return status code 500 if description is invalid","status":"failed","title":"should return status code 500 if description is invalid"},{"ancestorTitles":["POST /courses/create","Description Field"],"duration":5,"failureMessages":[],"fullName":"POST /courses/create Description Field should return status code 500 if description is empty","status":"passed","title":"should return status code 500 if description is empty"},{"ancestorTitles":["POST /courses/create","UserID Field"],"duration":389,"failureMessages":[],"fullName":"POST /courses/create UserID Field should create a new course with valid UserID and return status code 200","status":"passed","title":"should create a new course with valid UserID and return status code 200"},{"ancestorTitles":["POST /courses/create","UserID Field"],"duration":8,"failureMessages":[],"fullName":"POST /courses/create UserID Field should return status code 500 if UserID is invalid","status":"passed","title":"should return status code 500 if UserID is invalid"},{"ancestorTitles":["POST /courses/create","UserID Field"],"duration":5,"failureMessages":[],"fullName":"POST /courses/create UserID Field should return status code 500 if UserID is empty","status":"passed","title":"should return status code 500 if UserID is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","Name Field"],"duration":416,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId Name Field should update a course with valid name and return status code 200","status":"passed","title":"should update a course with valid name and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","Name Field"],"duration":1,"failureMessages":["Error: .field(name, val) val can not be empty\n    at Test.Object.<anonymous>.RequestBase.field (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\superagent\\src\\request-base.js:456:11)\n    at Object.field (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:627:10)\n    at Promise.then.completed (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"],"fullName":"PUT /courses/edit/:courseId Name Field should return status code 500 if name is invalid","status":"failed","title":"should return status code 500 if name is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId","Name Field"],"duration":376,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:651:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Name Field should return status code 500 if name is empty","status":"failed","title":"should return status code 500 if name is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","Instructor Field"],"duration":393,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId Instructor Field should update a course with valid instructor and return status code 200","status":"passed","title":"should update a course with valid instructor and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","Instructor Field"],"duration":379,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:696:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Instructor Field should return status code 500 if instructor is invalid","status":"failed","title":"should return status code 500 if instructor is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId","Instructor Field"],"duration":386,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:715:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Instructor Field should return status code 500 if instructor is empty","status":"failed","title":"should return status code 500 if instructor is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","Email Field"],"duration":434,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId Email Field should update a course with valid email and return status code 200","status":"passed","title":"should update a course with valid email and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","Email Field"],"duration":373,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:760:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Email Field should return status code 500 if email is invalid","status":"failed","title":"should return status code 500 if email is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId","Email Field"],"duration":370,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:779:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Email Field should return status code 500 if email is empty","status":"failed","title":"should return status code 500 if email is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","University Field"],"duration":427,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId University Field should update a course with valid university and return status code 200","status":"passed","title":"should update a course with valid university and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","University Field"],"duration":412,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:824:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId University Field should return status code 500 if university is invalid","status":"failed","title":"should return status code 500 if university is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId","University Field"],"duration":398,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:843:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId University Field should return status code 500 if university is empty","status":"failed","title":"should return status code 500 if university is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","Year Field"],"duration":422,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId Year Field should update a course with valid year and return status code 200","status":"passed","title":"should update a course with valid year and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","Year Field"],"duration":382,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:888:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Year Field should return status code 500 if year is invalid","status":"failed","title":"should return status code 500 if year is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId","Year Field"],"duration":429,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:907:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Year Field should return status code 500 if year is empty","status":"failed","title":"should return status code 500 if year is empty"},{"ancestorTitles":["PUT /courses/edit/:courseId","Description Field"],"duration":468,"failureMessages":[],"fullName":"PUT /courses/edit/:courseId Description Field should update a course with valid description and return status code 200","status":"passed","title":"should update a course with valid description and return status code 200"},{"ancestorTitles":["PUT /courses/edit/:courseId","Description Field"],"duration":457,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:952:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId Description Field should return status code 500 if description is invalid","status":"failed","title":"should return status code 500 if description is invalid"},{"ancestorTitles":["PUT /courses/edit/:courseId"],"duration":407,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:972:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PUT /courses/edit/:courseId should return status code 500 if description is empty","status":"failed","title":"should return status code 500 if description is empty"},{"ancestorTitles":["Search by Name"],"duration":193,"failureMessages":[],"fullName":"Search by Name should return status code 200 and search results if query matches name exactly","status":"passed","title":"should return status code 200 and search results if query matches name exactly"},{"ancestorTitles":["Search by Name"],"duration":191,"failureMessages":[],"fullName":"Search by Name should return status code 200 and search results if query matches name partially","status":"passed","title":"should return status code 200 and search results if query matches name partially"},{"ancestorTitles":["Search by Name"],"duration":206,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:999:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Name should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by Instructor"],"duration":242,"failureMessages":[],"fullName":"Search by Instructor should return status code 200 and search results if query matches instructor exactly","status":"passed","title":"should return status code 200 and search results if query matches instructor exactly"},{"ancestorTitles":["Search by Instructor"],"duration":199,"failureMessages":[],"fullName":"Search by Instructor should return status code 200 and search results if query matches instructor partially","status":"passed","title":"should return status code 200 and search results if query matches instructor partially"},{"ancestorTitles":["Search by Instructor"],"duration":185,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:1025:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Instructor should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by Email"],"duration":191,"failureMessages":[],"fullName":"Search by Email should return status code 200 and search results if query matches email exactly","status":"passed","title":"should return status code 200 and search results if query matches email exactly"},{"ancestorTitles":["Search by Email"],"duration":186,"failureMessages":[],"fullName":"Search by Email should return status code 200 and search results if query matches email partially","status":"passed","title":"should return status code 200 and search results if query matches email partially"},{"ancestorTitles":["Search by Email"],"duration":237,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:1051:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Email should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by University"],"duration":195,"failureMessages":[],"fullName":"Search by University should return status code 200 and search results if query matches university exactly","status":"passed","title":"should return status code 200 and search results if query matches university exactly"},{"ancestorTitles":["Search by University"],"duration":184,"failureMessages":[],"fullName":"Search by University should return status code 200 and search results if query matches university partially","status":"passed","title":"should return status code 200 and search results if query matches university partially"},{"ancestorTitles":["Search by University"],"duration":186,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:1077:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by University should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by Year"],"duration":264,"failureMessages":[],"fullName":"Search by Year should return status code 200 and search results if query matches year exactly","status":"passed","title":"should return status code 200 and search results if query matches year exactly"},{"ancestorTitles":["Search by Year"],"duration":181,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:1096:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Year should return status code 200 and search results if query matches year partially","status":"failed","title":"should return status code 200 and search results if query matches year partially"},{"ancestorTitles":["Search by Year"],"duration":228,"failureMessages":[],"fullName":"Search by Year should return status code 404 if no results found for the query","status":"passed","title":"should return status code 404 if no results found for the query"},{"ancestorTitles":["Search by Description"],"duration":187,"failureMessages":[],"fullName":"Search by Description should return status code 200 and search results if query matches description exactly","status":"passed","title":"should return status code 200 and search results if query matches description exactly"},{"ancestorTitles":["Search by Description"],"duration":189,"failureMessages":[],"fullName":"Search by Description should return status code 200 and search results if query matches description partially","status":"passed","title":"should return status code 200 and search results if query matches description partially"},{"ancestorTitles":["Search by Description"],"duration":182,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\tests\\unit tests\\equivalence partitioning\\Course.test.js:1129:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Search by Description should return status code 404 if no results found for the query","status":"failed","title":"should return status code 404 if no results found for the query"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":true,"collectCoverageFrom":[],"coverageDirectory":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\coverage","coverageProvider":"babel","coverageReporters":["html","text"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":11,"noStackTrace":false,"nonFlagArgs":["test","tests\\security","tests\\Security-equiv-part.test.js"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./html-report","filename":"report.html","expand":true}]],"rootDir":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server","runTestsByPath":false,"seed":29072923,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"test|tests\\security|tests\\Security-equiv-part.test.js","testSequencer":"C:\\Users\\PMYLS\\Downloads\\Repositories\\National_Open_Courseware\\server\\node_modules\\@jest\\test-sequencer\\build\\index.js","testTimeout":40000,"updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false,"coverageLinkPath":"..\\coverage\\index.html"},"endTime":1715518002586,"_reporterOptions":{"publicPath":"./html-report","filename":"report.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})